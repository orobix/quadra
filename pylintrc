[MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-allow-list=

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code. (This is an alternative name to extension-pkg-allow-list
# for backward compatibility.)
extension-pkg-whitelist=numpy

# Return non-zero exit code if any of these messages/categories are detected,
# even if score is above --fail-under value. Syntax same as enable. Messages
# specified are enabled, while categories only check already-enabled messages.
fail-on=

# Specify a score threshold to be exceeded before program exits with error.
fail-under=10.0

# Files or directories to be skipped. They should be base names, not paths.
ignore=CVS

# Add files or directories matching the regex patterns to the ignore-list. The
# regex matches against paths and can be in Posix or Windows format.
ignore-paths=

# Files or directories matching the regex patterns are skipped. The regex
# matches against base names, not paths. The default value ignores emacs file
# locks
ignore-patterns=^\.#

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs=1

# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results=100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# Minimum Python version to use for version dependent checks. Will default to
# the version used to run pylint.
py-version=3.8

# Discover python modules and packages in the file system subtree.
recursive=no

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE,
# UNDEFINED.
confidence=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then re-enable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable=raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-symbolic-message-instead,
        unspecified-encoding,
        missing-function-docstring, # This should be dealt by interrogate
        unidiomatic-typecheck,
        abstract-method,
        arguments-differ,
        not-callable,
        import-error,
        too-many-locals,
        too-many-arguments,
        too-few-public-methods,
        attribute-defined-outside-init,
        too-many-instance-attributes,
        missing-module-docstring,
        too-many-statements,
        too-many-branches,
        function-redefined,
        no-member,
        unbalanced-tuple-unpacking,
        duplicate-code,
        unsubscriptable-object,
        too-many-nested-blocks,
        fixme,
        too-many-ancestors,
        broad-exception-caught,
		# Taken from https://pypi.org/project/pylint-to-ruff/
        # Already checked thanks to ruff
		# "PLC0103",  # invalid-name
		# "PLC0104",  # disallowed-name
		# "PLC0105",  # typevar-name-incorrect-variance
		"D419",  # empty-docstring
		# "PLC0113",  # unneeded-not
		# "PLC0115",  # missing-class-docstring
		# "PLC0121",  # singleton-comparison
		# "PLC0131",  # typevar-double-variance
		# "PLC0132",  # typevar-name-mismatch
		# "PLC0200",  # consider-using-enumerate
		# "PLC0201",  # consider-iterating-dictionary
		# "PLC0202",  # bad-classmethod-argument
		# "PLC0203",  # bad-mcs-method-argument
		# "PLC0204",  # bad-mcs-classmethod-argument
		# "PLC0205",  # single-string-used-for-slots
		# "PLC0206",  # consider-using-dict-items
		# "PLC0207",  # use-maxsplit-arg
		# "PLC0208",  # use-sequence-for-iteration
		# "PLC0209",  # consider-using-f-string
		"E501",  # line-too-long
		# "PLC0302",  # too-many-lines
		"W291",  # trailing-whitespace
		# "PLC0304",  # missing-final-newline
		# "PLC0305",  # trailing-newlines
		# "PLC0321",  # multiple-statements
		# "PLC0325",  # superfluous-parens
		# "PLC0327",  # mixed-line-endings
		# "PLC0328",  # unexpected-line-ending-format
		# "PLC0401",  # wrong-spelling-in-comment
		# "PLC0402",  # wrong-spelling-in-docstring
		# "PLC0403",  # invalid-characters-in-docstring
		# "PLC0410",  # multiple-imports
		# "PLC0411",  # wrong-import-order
		# "PLC0412",  # ungrouped-imports
		# "PLC0413",  # wrong-import-position
		"PLC0414",  # useless-import-alias
		# "PLC0415",  # import-outside-toplevel
		# "PLC1802",  # use-implicit-booleaness-not-len
		# "PLC1803",  # use-implicit-booleaness-not-comparison
		"PLC2401",  # non-ascii-name
		# "PLC2403",  # non-ascii-module-import
		# "PLC2503",  # bad-file-encoding
		"PLC2801",  # unnecessary-dunder-call
		# "PLC3001",  # unnecessary-lambda-assignment
		"PLC3002",  # unnecessary-direct-lambda-call
		"E999",  # syntax-error
		# "PLE0011",  # unrecognized-inline-option
		# "PLE0013",  # bad-plugin-value
		# "PLE0014",  # bad-configuration-section
		# "PLE0015",  # unrecognized-option
		# "PLE0100",  # init-is-generator
		"PLE0101",  # return-in-init
		# "PLE0103",  # not-in-loop
		"F706",  # return-outside-function
		"F704",  # yield-outside-function
		# "PLE0107",  # nonexistent-operator
		# "PLE0108",  # duplicate-argument-name
		# "PLE0110",  # abstract-class-instantiated
		# "PLE0111",  # bad-reversed-sequence
		# "PLE0112",  # too-many-star-expressions
		# "PLE0113",  # invalid-star-assignment-target
		# "PLE0114",  # star-needs-assignment-target
		"PLE0115",  # nonlocal-and-global
		"PLE0116",  # continue-in-finally
		"PLE0117",  # nonlocal-without-binding
		# "PLE0118",  # used-prior-global-declaration
		# "PLE0119",  # misplaced-format-function
		# "PLE0202",  # method-hidden
		# "PLE0203",  # access-member-before-definition
		# "PLE0211",  # no-method-argument
		# "PLE0213",  # no-self-argument
		# "PLE0236",  # invalid-slots-object
		# "PLE0237",  # assigning-non-slot
		# "PLE0238",  # invalid-slots
		# "PLE0239",  # inherit-non-class
		# "PLE0240",  # inconsistent-mro
		"PLE0241",  # duplicate-bases
		# "PLE0242",  # class-variable-slots-conflict
		# "PLE0243",  # invalid-class-object
		# "PLE0244",  # invalid-enum-extension
		# "PLE0301",  # non-iterator-returned
		"PLE0302",  # unexpected-special-method-signature
		# "PLE0303",  # invalid-length-returned
		# "PLE0304",  # invalid-bool-returned
		# "PLE0305",  # invalid-index-returned
		# "PLE0306",  # invalid-repr-returned
		# "PLE0307",  # invalid-str-returned
		# "PLE0308",  # invalid-bytes-returned
		# "PLE0309",  # invalid-hash-returned
		# "PLE0310",  # invalid-length-hint-returned
		# "PLE0311",  # invalid-format-returned
		# "PLE0312",  # invalid-getnewargs-returned
		# "PLE0313",  # invalid-getnewargs-ex-returned
		# "PLE0402",  # relative-beyond-top-level
		# "PLE0601",  # used-before-assignment
		# "PLE0602",  # undefined-variable
		# "PLE0603",  # undefined-all-variable
		"PLE0604",  # invalid-all-object
		"PLE0605",  # invalid-all-format
		# "PLE0611",  # no-name-in-module
		# "PLE0633",  # unpacking-non-sequence
		"PLE0643",  # potential-index-error
		# "PLE0701",  # bad-except-order
		# "PLE0702",  # raising-bad-type
		"PLE0704",  # misplaced-bare-raise
		# "PLE0705",  # bad-exception-cause
		# "PLE0710",  # raising-non-exception
		# "PLE0711",  # notimplemented-raised
		# "PLE0712",  # catching-non-exception
		# "PLE1003",  # bad-super-call
		# "PLE1111",  # assignment-from-no-return
		# "PLE1120",  # no-value-for-parameter
		# "PLE1121",  # too-many-function-args
		# "PLE1123",  # unexpected-keyword-arg
		# "PLE1124",  # redundant-keyword-arg
		# "PLE1125",  # missing-kwoa
		# "PLE1126",  # invalid-sequence-index
		# "PLE1127",  # invalid-slice-index
		# "PLE1128",  # assignment-from-none
		# "PLE1129",  # not-context-manager
		# "PLE1130",  # invalid-unary-operand-type
		# "PLE1131",  # unsupported-binary-operation
		# "PLE1132",  # repeated-keyword
		# "PLE1133",  # not-an-iterable
		# "PLE1134",  # not-a-mapping
		# "PLE1135",  # unsupported-membership-test
		# "PLE1137",  # unsupported-assignment-operation
		# "PLE1138",  # unsupported-delete-operation
		# "PLE1139",  # invalid-metaclass
		"PLE1141",  # dict-iter-missing-items
		"PLE1142",  # await-outside-async
		# "PLE1143",  # unhashable-member
		# "PLE1144",  # invalid-slice-step
		# "PLE1200",  # logging-unsupported-format
		# "PLE1201",  # logging-format-truncated
		"PLE1205",  # logging-too-many-args
		"PLE1206",  # logging-too-few-args
		# "PLE1300",  # bad-format-character
		# "PLE1301",  # truncated-format-string
		# "PLE1302",  # mixed-format-string
		# "PLE1303",  # format-needs-mapping
		# "PLE1304",  # missing-format-string-key
		# "PLE1305",  # too-many-format-args
		# "PLE1306",  # too-few-format-args
		"PLE1307",  # bad-string-format-type
		"PLE1310",  # bad-str-strip-call
		"PLE1507",  # invalid-envvar-value
		"PLE1519",  # singledispatch-method
		"PLE1520",  # singledispatchmethod-function
		# "PLE1700",  # yield-inside-async-function
		# "PLE1701",  # not-async-context-manager
		# "PLE2501",  # invalid-unicode-codec
		"PLE2502",  # bidirectional-unicode
		"PLE2510",  # invalid-character-backspace
		# "PLE2511",  # invalid-character-carriage-return
		"PLE2512",  # invalid-character-sub
		"PLE2513",  # invalid-character-esc
		"PLE2514",  # invalid-character-nul
		"PLE2515",  # invalid-character-zero-width-space
		# "PLE3102",  # positional-only-arguments-expected
		# "PLE4702",  # modified-iterating-dict
		"PLE4703",  # modified-iterating-set
		# "PLF0001",  # fatal
		# "PLF0002",  # astroid-error
		# "PLF0010",  # parse-error
		# "PLF0011",  # config-parse-error
		# "PLF0202",  # method-check-failed
		# "PLI1101",  # c-extension-no-member
		# "PLR0022",  # useless-option-value
		# "PLR0123",  # literal-comparison
		"PLR0124",  # comparison-with-itself
		# "PLR0133",  # comparison-of-constants
		"PLR0202",  # no-classmethod-decorator
		"PLR0203",  # no-staticmethod-decorator
		"UP004",  # useless-object-inheritance
		"PLR0206",  # property-with-parameters
		# "PLR0401",  # cyclic-import
		# "PLR0402",  # consider-using-from-import
		"PLR0904",  # too-many-public-methods
		"PLR0911",  # too-many-return-statements
		"PLR0916",  # too-many-boolean-expressions
		# "PLR1701",  # consider-merging-isinstance
		# "PLR1703",  # simplifiable-if-statement
		"PLR1704",  # redefined-argument-from-local
		# "PLR1705",  # no-else-return
		# "PLR1706",  # consider-using-ternary
		# "PLR1707",  # trailing-comma-tuple
		# "PLR1708",  # stop-iteration-return
		# "PLR1709",  # simplify-boolean-expression
		# "PLR1710",  # inconsistent-return-statements
		"PLR1711",  # useless-return
		# "PLR1712",  # consider-swap-variables
		# "PLR1713",  # consider-using-join
		# "PLR1714",  # consider-using-in
		# "PLR1715",  # consider-using-get
		# "PLR1716",  # chained-comparison
		# "PLR1717",  # consider-using-dict-comprehension
		# "PLR1718",  # consider-using-set-comprehension
		# "PLR1719",  # simplifiable-if-expression
		# "PLR1720",  # no-else-raise
		"C416",  # unnecessary-comprehension
		# "PLR1722",  # consider-using-sys-exit
		# "PLR1723",  # no-else-break
		# "PLR1724",  # no-else-continue
		# "PLR1725",  # super-with-arguments
		# "PLR1726",  # simplifiable-condition
		# "PLR1727",  # condition-evals-to-constant
		# "PLR1728",  # consider-using-generator
		# "PLR1729",  # use-a-generator
		# "PLR1730",  # consider-using-min-builtin
		# "PLR1731",  # consider-using-max-builtin
		# "PLR1732",  # consider-using-with
		"PLR1733",  # unnecessary-dict-index-lookup
		# "PLR1734",  # use-list-literal
		# "PLR1735",  # use-dict-literal
		"PLR1736",  # unnecessary-list-index-lookup
		# "PLW0012",  # unknown-option-value
		# "PLW0101",  # unreachable
		# "PLW0102",  # dangerous-default-value
		# "PLW0104",  # pointless-statement
		# "PLW0105",  # pointless-string-statement
		# "PLW0106",  # expression-not-assigned
		# "PLW0107",  # unnecessary-pass
		"PLW0108",  # unnecessary-lambda
		# "PLW0109",  # duplicate-key
		"PLW0120",  # useless-else-on-loop
		# "PLW0122",  # exec-used
		# "PLW0123",  # eval-used
		# "PLW0124",  # confusing-with-statement
		# "PLW0125",  # using-constant-test
		# "PLW0126",  # missing-parentheses-for-call-in-test
		"PLW0127",  # self-assigning-variable
		"PLW0128",  # redeclared-assigned-name
		"PLW0129",  # assert-on-string-literal
		"B033",  # duplicate-value
		"PLW0131",  # named-expr-without-context
		# "PLW0133",  # pointless-exception-statement
		# "PLW0143",  # comparison-with-callable
		# "PLW0150",  # lost-exception
		"PLW0177",  # nan-comparison
		# "PLW0199",  # assert-on-tuple
		"PLW0211",  # bad-staticmethod-argument
		# "PLW0212",  # protected-access
		# "PLW0222",  # signature-differs
		# "PLW0231",  # super-init-not-called
		# "PLW0233",  # non-parent-init-called
		# "PLW0236",  # invalid-overridden-method
		# "PLW0237",  # arguments-renamed
		# "PLW0238",  # unused-private-member
		# "PLW0239",  # overridden-final-method
		# "PLW0240",  # subclassed-final-class
		# "PLW0244",  # redefined-slots-in-subclass
		"PLW0245",  # super-without-brackets
		# "PLW0246",  # useless-parent-delegation
		# "PLW0301",  # unnecessary-semicolon
		# "PLW0311",  # bad-indentation
		# "PLW0401",  # wildcard-import
		# "PLW0404",  # reimported
		"PLW0406",  # import-self
		# "PLW0407",  # preferred-module
		# "PLW0410",  # misplaced-future
		# "PLW0416",  # shadowed-import
		# "PLW0601",  # global-variable-undefined
		"PLW0602",  # global-variable-not-assigned
		"PLW0603",  # global-statement
		"PLW0604",  # global-at-module-level
		"F401",  # unused-import
		"F841",  # unused-variable
		# "PLW0613",  # unused-argument
		# "PLW0614",  # unused-wildcard-import
		# "PLW0621",  # redefined-outer-name
		# "PLW0622",  # redefined-builtin
		# "PLW0631",  # undefined-loop-variable
		# "PLW0640",  # cell-var-from-loop
		# "PLW0641",  # possibly-unused-variable
		# "PLW0642",  # self-cls-assignment
		# "PLW0644",  # unbalanced-dict-unpacking
		"E722",  # bare-except
		# "PLW0705",  # duplicate-except
		# "PLW0706",  # try-except-raise
		# "PLW0707",  # raise-missing-from
		"PLW0711",  # binary-op-exception
		# "PLW0715",  # raising-format-tuple
		# "PLW0716",  # wrong-exception-operation
		# "PLW0719",  # broad-exception-raised
		# "PLW1113",  # keyword-arg-before-vararg
		# "PLW1114",  # arguments-out-of-order
		# "PLW1115",  # non-str-assignment-to-dunder-name
		# "PLW1116",  # isinstance-second-argument-not-valid-type
		# "PLW1201",  # logging-not-lazy
		# "PLW1202",  # logging-format-interpolation
		# "PLW1203",  # logging-fstring-interpolation
		# "PLW1300",  # bad-format-string-key
		# "PLW1301",  # unused-format-string-key
		# "PLW1302",  # bad-format-string
		# "PLW1303",  # missing-format-argument-key
		# "PLW1304",  # unused-format-string-argument
		# "PLW1305",  # format-combined-specification
		# "PLW1306",  # missing-format-attribute
		# "PLW1307",  # invalid-format-index
		# "PLW1308",  # duplicate-string-formatting-argument
		# "PLW1309",  # f-string-without-interpolation
		# "PLW1310",  # format-string-without-interpolation
		# "PLW1401",  # anomalous-backslash-in-string
		# "PLW1402",  # anomalous-unicode-escape-in-string
		# "PLW1404",  # implicit-str-concat
		# "PLW1405",  # inconsistent-quotes
		# "PLW1406",  # redundant-u-string-prefix
		"PLW1501",  # bad-open-mode
		# "PLW1503",  # redundant-unittest-assert
		# "PLW1506",  # bad-thread-instantiation
		# "PLW1507",  # shallow-copy-environ
		"PLW1508",  # invalid-envvar-default
		"PLW1509",  # subprocess-popen-preexec-fn
		# "PLW1510",  # subprocess-run-check
		# "PLW1515",  # forgotten-debug-statement
		# "PLW1518",  # method-cache-max-size-none
		"PLW2101",  # useless-with-lock
		# "PLW2301",  # unnecessary-ellipsis
		# "PLW2402",  # non-ascii-file-name
		# "PLW2601",  # using-f-string-in-unsupported-version
		# "PLW2602",  # using-final-decorator-in-unsupported-version
		# "PLW3101",  # missing-timeout
		"PLW3301",  # nested-min-max
		# "PLW4701",  # modified-iterating-list
		# "PLW4901",  # deprecated-module
		# "PLW4902",  # deprecated-method
		# "PLW4903",  # deprecated-argument
		# "PLW4904",  # deprecated-class
		# "PLW4905",  # deprecated-decorator
        



# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable=c-extension-no-member


[REPORTS]

# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each
# category, as well as 'statement' which is the total number of statements
# analyzed. This score is used by the global evaluation report (RP0004).
evaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
#msg-template=

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

# Activate the evaluation score.
score=yes


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions=sys.exit,argparse.parse_error


[LOGGING]

# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style=old

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules=logging


[STRING]

# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency=no

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps=no


[SPELLING]

# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4

# Spelling dictionary name. Available dictionaries: none. To make it work,
# install the 'python-enchant' package.
spelling-dict=

# List of comma separated words that should be considered directives if they
# appear and the beginning of a comment and should not be checked.
spelling-ignore-comment-directives=fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains the private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words=no


[TYPECHECK]

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=torch.*,cv2.*,pytorch_lightning.*

# Tells whether missing members accessed in mixin class should be ignored. A
# class is considered mixin if its name matches the mixin-class-rgx option.
ignore-mixin-members=yes

# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference=yes

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis). It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=anomalib

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices=1

# Regex pattern to define which classes are considered mixins ignore-mixin-
# members is set to 'yes'
mixin-class-rgx=.*[Mm]ixin

# List of decorators that change the signature of a decorated function.
signature-mutators=


[BASIC]

# Naming style matching correct argument names.
argument-naming-style=snake_case

# Regular expression matching correct argument names. Overrides argument-
# naming-style. If left empty, argument names will be checked with the set
# naming style.
#argument-rgx=

# Naming style matching correct attribute names.
attr-naming-style=snake_case

# Regular expression matching correct attribute names. Overrides attr-naming-
# style. If left empty, attribute names will be checked with the set naming
# style.
#attr-rgx=

# Bad variable names which should always be refused, separated by a comma.
bad-names=foo,
          bar,
          baz,
          toto,
          tutu,
          tata

# Bad variable names regexes, separated by a comma. If names match any regex,
# they will always be refused
bad-names-rgxs=

# Naming style matching correct class attribute names.
class-attribute-naming-style=any

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style. If left empty, class attribute names will be checked
# with the set naming style.
#class-attribute-rgx=

# Naming style matching correct class constant names.
class-const-naming-style=UPPER_CASE

# Regular expression matching correct class constant names. Overrides class-
# const-naming-style. If left empty, class constant names will be checked with
# the set naming style.
#class-const-rgx=

# Naming style matching correct class names.
class-naming-style=PascalCase

# Regular expression matching correct class names. Overrides class-naming-
# style. If left empty, class names will be checked with the set naming style.
#class-rgx=

# Naming style matching correct constant names.
const-naming-style=UPPER_CASE

# Regular expression matching correct constant names. Overrides const-naming-
# style. If left empty, constant names will be checked with the set naming
# style.
#const-rgx=

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names.
function-naming-style=snake_case

# Regular expression matching correct function names. Overrides function-
# naming-style. If left empty, function names will be checked with the set
# naming style.
#function-rgx=

# Good variable names which should always be accepted, separated by a comma.
good-names=i,
           j,
           k,
           ex,
           Run,
           _

# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
good-names-rgxs=^[_a-zA-Z][_a-zA-Z0-9]?$

# Include a hint for the correct naming format with invalid-name.
include-naming-hint=no

# Naming style matching correct inline iteration names.
inlinevar-naming-style=any

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style. If left empty, inline iteration names will be checked
# with the set naming style.
#inlinevar-rgx=

# Naming style matching correct method names.
method-naming-style=snake_case

# Regular expression matching correct method names. Overrides method-naming-
# style. If left empty, method names will be checked with the set naming style.
#method-rgx=

# Naming style matching correct module names.
module-naming-style=snake_case

# Regular expression matching correct module names. Overrides module-naming-
# style. If left empty, module names will be checked with the set naming style.
#module-rgx=

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes=abc.abstractproperty

# Regular expression matching correct type variable names. If left empty, type
# variable names will be checked with the set naming style.
#typevar-rgx=

# Naming style matching correct variable names.
variable-naming-style=snake_case

# Regular expression matching correct variable names. Overrides variable-
# naming-style. If left empty, variable names will be checked with the set
# naming style.
#variable-rgx=


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,
      XXX,
      TODO

# Regular expression of note tags to take in consideration.
#notes-rgx=


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=120

# Maximum number of lines in a module.
max-module-lines=1500

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no


[VARIABLES]

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of names allowed to shadow builtins
allowed-redefined-builtins=

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,
          _cb

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored. Default to name
# with leading underscore.
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io


[SIMILARITIES]

# Comments are removed from the similarity computation
ignore-comments=yes

# Docstrings are removed from the similarity computation
ignore-docstrings=yes

# Imports are removed from the similarity computation
ignore-imports=no

# Signatures are removed from the similarity computation
ignore-signatures=no

# Minimum lines number of a similarity.
min-similarity-lines=4


[IMPORTS]

# List of modules that can be imported at any level, not just the top level
# one.
allow-any-import-level=

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules=

# Output a graph (.gv or any supported image format) of external dependencies
# to the given file (report RP0402 must not be disabled).
ext-import-graph=

# Output a graph (.gv or any supported image format) of all (i.e. internal and
# external) dependencies to the given file (report RP0402 must not be
# disabled).
import-graph=

# Output a graph (.gv or any supported image format) of internal dependencies
# to the given file (report RP0402 must not be disabled).
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant

# Couples of modules and preferred modules, separated by a comma.
preferred-modules=


[DESIGN]

# List of regular expressions of class ancestor names to ignore when counting
# public methods (see R0903)
exclude-too-few-public-methods=

# List of qualified class names to ignore when counting class parents (see
# R0901)
ignored-parents=

# Maximum number of arguments for function / method.
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr=5

# Maximum number of branch for function / method body.
max-branches=12

# Maximum number of locals for function / method body.
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body.
max-returns=6

# Maximum number of statements in function / method body.
max-statements=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=2


[CLASSES]

# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods=no

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,
                      __new__,
                      setUp,
                      __post_init__

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=cls


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "BaseException, Exception".
overgeneral-exceptions=builtins.BaseException,
                       builtins.Exception

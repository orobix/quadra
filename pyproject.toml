[tool.poetry]
name = "quadra"
version = "2.0.4"
description = "Deep Learning experiment orchestration library"
authors = [
  "Federico Belotti <federico.belotti@orobix.com>",
  "Silvia Bianchetti <silvia.bianchetti@orobix.com>",
  "Refik Can Malli <refikcan.malli@orobix.com>",
  "Lorenzo Mammana <lorenzo.mammana@orobix.com>",
  "Alessandro Polidori <alessandro.polidori@orobix.com>",
]
license = "Apache-2.0"
readme = "README.md"
keywords = ["deep learning", "experiment", "lightning", "hydra-core"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: Apache Software License",
]
homepage = "https://orobix.github.io/quadra"
repository = "https://github.com/orobix/quadra"
packages = [
  { include = "quadra" },
  { include = "hydra_plugins", from = "quadra_hydra_plugin" },
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
quadra = "quadra.main:main"

[tool.poetry.dependencies]
python = ">=3.9,<3.11"
poetry = "1.7.1"

torch = [
  { url = "https://download.pytorch.org/whl/cu121/torch-2.1.2%2Bcu121-cp310-cp310-linux_x86_64.whl", markers = "sys_platform == 'linux' and python_version == '3.10'" },
  { url = "https://download.pytorch.org/whl/cu121/torch-2.1.2%2Bcu121-cp310-cp310-win_amd64.whl", markers = "sys_platform == 'win32' and python_version == '3.10'" },
  { url = "https://download.pytorch.org/whl/cu121/torch-2.1.2%2Bcu121-cp39-cp39-linux_x86_64.whl", markers = "sys_platform == 'linux' and python_version == '3.9'" },
  { url = "https://download.pytorch.org/whl/cu121/torch-2.1.2%2Bcu121-cp39-cp39-win_amd64.whl", markers = "sys_platform == 'win32' and python_version == '3.9'" },
]
torchvision = { version = "~0.16", source = "torch_cu121" }

pytorch_lightning = "~2.1"
torchsummary = "~1.5"
torchmetrics = "~0.10"
hydra_core = "~1.3"
hydra_colorlog = "~1.2"
hydra_optuna_sweeper = "~1.2"
mlflow = "2.3.1"
mlflow_skinny = "2.3.1"
boto3 = "~1.26"
minio = "~7.1"
tensorboard = "~2.11"
pillow = "~9.3"
pandas = "<2.0"
opencv_python_headless = "~4.7.0"
python_dotenv = "~0.21"
rich = "~13.2"
scikit_learn = "~1.2"
pydantic = "1.10.10"
grad_cam = "1.4.6"
matplotlib = "~3.6"
seaborn = "~0.12"
albumentations = "~1.3"
nvitop = "~0.11"
label_studio_converter = "~0.0"
scikit_multilearn = "~0.2"
tripy = "~1.0"
h5py = "~3.8"
timm = "0.9.12"
# Right now only this ref supports timm 0.9.12
segmentation_models_pytorch = { git = "https://github.com/qubvel/segmentation_models.pytorch", rev = "7b381f899ed472a477a89d381689caf535b5d0a6" }
anomalib = { git = "https://github.com/orobix/anomalib.git", tag = "v0.7.0+obx.1.3.0" }
xxhash = "~3.2"
torchinfo = "~1.8"

# ONNX dependencies
onnx = { version = "1.15.0", optional = true }
onnxsim = { version = "0.4.28", optional = true }
onnxruntime_gpu = { version = "1.17.0", optional = true, source = "onnx_cu12" }

[[tool.poetry.source]]
name = "torch_cu121"
url = "https://download.pytorch.org/whl/cu121"
priority = "explicit"

[[tool.poetry.source]]
name = "onnx_cu12"
url = "https://pkgs.dev.azure.com/onnxruntime/onnxruntime/_packaging/onnxruntime-cuda-12/pypi/simple/"
priority = "explicit"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
hydra-plugins = { path = "quadra_hydra_plugin" }
# Dev dependencies
interrogate = "~1.5"
black = "~22.12"
isort = "~5.11"
pre_commit = "~3.0"
pylint = "~2.16"
types_pyyaml = "~6.0.12"
mypy = "~1.0"
ruff = "0.0.257"
pandas_stubs = "~1.5.3"
twine = "~4.0"
poetry-bumpversion = "~0.3"

# Test dependencies
[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7"
pytest_cov = "~4.0"
pytest_lazy_fixture = "~0.6"
pytest_mock = "~3.11"
pytest_env = "~1.1"

# Documentation dependencies
[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "1.5.2"
mkdocs_literate_nav = "0.6.0"
mkdocs_section_index = "0.3.6"
mkdocstrings = "0.23.0"
mkdocs_autorefs = "0.5.0"
mkdocs_gen_files = "0.5.0"
mkdocs_material = "9.2.8"
mkdocstrings_python = "1.6.2"
mkdocs_material_extensions = "1.1.1"
mike = "1.1.2"
cairosvg = "2.7.0"

[tool.poetry.extras]
onnx = ["onnx", "onnxsim", "onnxruntime_gpu"]

[tool.poetry_bumpversion.file."quadra/__init__.py"]
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

# Black formatting
[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
'''

# iSort
[tool.isort]
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
multi_line_output = 3
include_trailing_comma = true
skip_gitignore = true

# Pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "--strict-markers --disable-pytest-warnings"
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]

# Pytest coverage
[tool.coverage.run]
omit = []

[tool.prettier]
tab_width = 2

[tool.interrogate]
ignore_init_method = true
ignore_init_module = false
ignore_magic = true
ignore_semiprivate = false
ignore_private = false
ignore_module = true
ignore_property_decorators = true
fail_under = 100
verbose = 2
omit_covered_files = false
quiet = false
whitelist_regex = []
color = true
ignore_regex = [
  "^get$",
  "^mock_.*",
  ".*BaseClass.*",
  ".*on_train.*",
  ".*on_validation.*",
  ".*on_test.*",
  ".*on_predict.*",
  ".*forward.*",
  ".*backward.*",
  ".*training_step.*",
  ".*validation_step.*",
  ".*test_step.*",
  ".*predict_step.*",
  ".*train_epoch.*",
  ".*validation_epoch.*",
  ".*test_epoch.*",
  ".*on_fit.*",
]
generate-badge = "docs/images"
badge-format = "svg"
exclude = ["docs", "tests", "build", "dist", "local", "scripts"]

[tool.mypy]
# -> Level 1
# custom settings
show_error_codes = true
ignore_missing_imports = true
plugins = "numpy.typing.mypy_plugin"
allow_redefinition = true
# suggested settings
# # https://mypy.readthedocs.io/en/stable/existing_code.html?highlight=no_implicit_optional#introduce-stricter-options
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_optional = true

# -> Level 2
strict_equality = false
strict_concatenate = false
check_untyped_defs = false

# -> Level 3
disallow_subclassing_any = false
disallow_untyped_decorators = false
disallow_any_generics = false
disallow_any_unimported = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
disallow_untyped_defs = false

# -> Level 4
no_implicit_reexport = false
warn_return_any = false
exclude = ["quadra/utils/tests", "tests"]

[tool.ruff]
select = ["D"]
ignore = [
  "D100",
  # this is controlled by interrogate with exlude_regex
  # we can skip it here
  "D102",
  "D104",
  "D105",
  "D107",
  # no blank line after summary line. This might be not required.
  # usually we violate this rule
  "D205",
]
exclude = ["Makefile", ".gitignore"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.pytest_env]
OMP_NUM_THREADS = 4
OPENBLAS_NUM_THREADS = 4
MKL_NUM_THREADS = 4
VECLIB_MAXIMUM_THREADS = 4
NUMEXPR_NUM_THREADS = 4
